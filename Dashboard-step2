Great! Let‚Äôs implement the Jenkins backend module in NestJS, which includes:
	1.	jenkins.service.ts ‚Üí Fetch Jenkins job statuses
	2.	jenkins.controller.ts ‚Üí Expose API endpoints
	3.	jenkins.module.ts ‚Üí Register module in NestJS

1Ô∏è‚É£ jenkins.service.ts (Service Layer)
	‚Ä¢	This file will communicate with Jenkins REST API to fetch job statuses.
	‚Ä¢	We‚Äôll also set up a WebSocket event for real-time updates.

import { Injectable, Logger } from '@nestjs/common';
import axios from 'axios';

@Injectable()
export class JenkinsService {
  private readonly JENKINS_URL = 'http://your-jenkins-server';
  private readonly JENKINS_USER = 'your_username';
  private readonly JENKINS_TOKEN = 'your_api_token';

  private readonly logger = new Logger(JenkinsService.name);

  async getJobStatuses(): Promise<any> {
    try {
      const url = `${this.JENKINS_URL}/api/json?tree=jobs[name,color]`;
      const response = await axios.get(url, {
        auth: { username: this.JENKINS_USER, password: this.JENKINS_TOKEN },
      });

      return response.data.jobs.map(job => ({
        name: job.name,
        status: this.parseStatus(job.color),
      }));
    } catch (error) {
      this.logger.error('Failed to fetch Jenkins jobs', error);
      throw error;
    }
  }

  private parseStatus(color: string): string {
    switch (color) {
      case 'blue': return 'SUCCESS';
      case 'red': return 'FAILED';
      case 'yellow': return 'UNSTABLE';
      case 'notbuilt': return 'NOT BUILT';
      case 'aborted': return 'ABORTED';
      default: return 'UNKNOWN';
    }
  }
}

‚úÖ What this does:
	‚Ä¢	Calls Jenkins REST API to fetch job statuses.
	‚Ä¢	Maps Jenkins colors (blue, red, yellow, etc.) to readable statuses.

2Ô∏è‚É£ jenkins.controller.ts (Controller Layer)
	‚Ä¢	This will expose API endpoints to get job statuses.

import { Controller, Get } from '@nestjs/common';
import { JenkinsService } from './jenkins.service';

@Controller('jenkins')
export class JenkinsController {
  constructor(private readonly jenkinsService: JenkinsService) {}

  @Get('jobs')
  async getJobStatuses() {
    return this.jenkinsService.getJobStatuses();
  }
}

‚úÖ What this does:
	‚Ä¢	Defines the route GET /jenkins/jobs to fetch job statuses from Jenkins.

3Ô∏è‚É£ jenkins.module.ts (Module Layer)
	‚Ä¢	This registers Jenkins service and controller in NestJS.

import { Module } from '@nestjs/common';
import { JenkinsService } from './jenkins.service';
import { JenkinsController } from './jenkins.controller';

@Module({
  providers: [JenkinsService],
  controllers: [JenkinsController],
})
export class JenkinsModule {}

‚úÖ What this does:
	‚Ä¢	Imports Jenkins Service & Controller into the module.
	‚Ä¢	Makes them available to NestJS dependency injection system.

üìå Step 4: Register Jenkins Module in app.module.ts

Modify app.module.ts to include Jenkins.

import { Module } from '@nestjs/common';
import { JenkinsModule } from './jenkins/jenkins.module';

@Module({
  imports: [JenkinsModule],
})
export class AppModule {}

üìå Step 5: Run & Test Backend

Start the NestJS server

npm run start

Test API Endpoint in Postman or Browser

GET http://localhost:3000/jenkins/jobs

‚úÖ Expected JSON Response:

[
  { "name": "Build-Project-A", "status": "SUCCESS" },
  { "name": "Deploy-App", "status": "FAILED" },
  { "name": "Test-Suite", "status": "UNSTABLE" }
]

üéØ Next Steps

‚úÖ Jenkins API integration is done! Now, should we:
1Ô∏è‚É£ Implement WebSockets for real-time job status updates?
2Ô∏è‚É£ Add Jenkins build details (timestamps, logs, duration, etc.)?