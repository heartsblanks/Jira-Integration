🚀 Steps to Set Up the Project Structure (Jenkins + Git Dashboard)

We will create a full-stack application with:
	•	Backend: NestJS (handles Jenkins & Git APIs + WebSockets for real-time updates)
	•	Frontend: Angular (displays Jenkins build statuses & Git commits in a dashboard)

🔧 Step 1: Initialize Backend (NestJS)

1.1 Create a New NestJS Project

Run the following commands in your terminal:

mkdir devops-dashboard && cd devops-dashboard
npx @nestjs/cli new backend

Choose npm or yarn when prompted.

1.2 Install Required Dependencies

cd backend
npm install @nestjs/websockets @nestjs/platform-socket.io axios

	•	axios: To fetch data from Jenkins API & Git API
	•	@nestjs/websockets: Enables real-time WebSockets

1.3 Create Modules & Services

Generate modules & services for Jenkins, Git, and WebSockets:

npx nest generate module jenkins
npx nest generate service jenkins
npx nest generate controller jenkins

npx nest generate module git
npx nest generate service git
npx nest generate controller git

npx nest generate gateway websockets

1.4 Folder Structure After NestJS Setup

backend/
│── src/
│   ├── jenkins/               # Jenkins API Integration
│   │   ├── jenkins.service.ts
│   │   ├── jenkins.controller.ts
│   │   ├── jenkins.module.ts
│   ├── git/                   # GitHub/GitLab API Integration
│   │   ├── git.service.ts
│   │   ├── git.controller.ts
│   │   ├── git.module.ts
│   ├── websockets/            # WebSocket for real-time updates
│   │   ├── websocket.gateway.ts
│   │   ├── websocket.module.ts
│   ├── app.module.ts          # Main module
│   ├── main.ts                # Entry point
│── package.json               # Dependencies
│── tsconfig.json              # TypeScript Config

🔧 Step 2: Initialize Frontend (Angular)

2.1 Create a New Angular Project

cd ..
npx @angular/cli new frontend

Choose CSS when prompted.

2.2 Install Required Dependencies

cd frontend
npm install @angular/material @angular/cdk socket.io-client

	•	@angular/material: UI components
	•	socket.io-client: Real-time WebSocket connection to backend

2.3 Generate Components & Services

ng generate component components/jenkins-dashboard
ng generate service services/jenkins

ng generate component components/git-dashboard
ng generate service services/git

2.4 Folder Structure After Angular Setup

frontend/
│── src/
│   ├── app/
│   │   ├── components/
│   │   │   ├── jenkins-dashboard/   # UI for Jenkins Builds
│   │   │   ├── git-dashboard/       # UI for Git Commits
│   │   ├── services/
│   │   │   ├── jenkins.service.ts   # Fetches Jenkins Data
│   │   │   ├── git.service.ts       # Fetches Git Data
│   ├── environments/
│   ├── assets/
│   ├── app.module.ts
│   ├── app.component.ts
│── angular.json
│── package.json
│── tsconfig.json

🔧 Step 3: Set Up Connections

3.1 Connect Backend to Jenkins API
	•	Jenkins REST API Endpoint: http://your-jenkins-server/api/json?tree=jobs[name,color]
	•	Implement jenkins.service.ts to fetch data

import { Injectable } from '@nestjs/common';
import axios from 'axios';

@Injectable()
export class JenkinsService {
  private readonly JENKINS_URL = 'http://your-jenkins-server';

  async getJobStatuses() {
    const url = `${this.JENKINS_URL}/api/json?tree=jobs[name,color]`;
    const response = await axios.get(url, { auth: { username: 'user', password: 'token' } });
    return response.data.jobs;
  }
}

3.2 Connect Frontend to WebSocket
	•	Modify jenkins.service.ts (Angular)

import { Injectable } from '@angular/core';
import { io } from 'socket.io-client';

@Injectable({
  providedIn: 'root'
})
export class JenkinsService {
  private socket = io('http://localhost:3000');

  getJobStatuses(callback: (data: any) => void) {
    this.socket.on('jenkins-updates', callback);
  }
}

🚀 Final Steps

✅ Run Backend

cd backend
npm run start

✅ Run Frontend

cd frontend
ng serve

✅ Test WebSockets
	•	Open the frontend in the browser: http://localhost:4200
	•	When a Jenkins build starts/finishes, the status should update in real-time.

🎯 Next Steps

Now that we have the basic Jenkins + Git Dashboard structure:
1️⃣ Do you want to implement Git API next or add more details to Jenkins (e.g., build logs)?
2️⃣ Would you like authentication (JWT, OAuth) before proceeding further?