üöÄ Step 3: Fetch Jenkins Build Logs & Artifacts

Now, we will enhance the Jenkins backend to include:
‚úîÔ∏è Build console logs (to check errors and warnings)
‚úîÔ∏è Build artifacts (downloadable files from Jenkins)
‚úîÔ∏è Build parameters (if the job was triggered with input values)

1Ô∏è‚É£ Update jenkins.service.ts to Fetch Logs & Artifacts

Jenkins API Endpoints Used
	1.	Build Logs:

http://your-jenkins-server/job/{job-name}/{build-number}/consoleText


	2.	Build Artifacts:

http://your-jenkins-server/job/{job-name}/{build-number}/api/json?tree=artifacts[fileName,relativePath]


	3.	Build Parameters (If Job Was Triggered With Inputs):

http://your-jenkins-server/job/{job-name}/{build-number}/api/json?tree=actions[parameters[name,value]]



Modify jenkins.service.ts

import { Injectable, Logger } from '@nestjs/common';
import axios from 'axios';

@Injectable()
export class JenkinsService {
  private readonly JENKINS_URL = 'http://your-jenkins-server';
  private readonly JENKINS_USER = 'your_username';
  private readonly JENKINS_TOKEN = 'your_api_token';
  private readonly logger = new Logger(JenkinsService.name);

  async getJobStatuses(): Promise<any> {
    try {
      const url = `${this.JENKINS_URL}/api/json?tree=jobs[name,color,lastBuild[number,timestamp,duration,result,actions[causes[userName],lastBuiltRevision[SHA1],parameters[name,value]]]]`;
      const response = await axios.get(url, {
        auth: { username: this.JENKINS_USER, password: this.JENKINS_TOKEN },
      });

      return response.data.jobs.map(job => ({
        name: job.name,
        status: this.parseStatus(job.color),
        lastBuild: job.lastBuild ? {
          buildNumber: job.lastBuild.number,
          timestamp: new Date(job.lastBuild.timestamp).toISOString(),
          duration: this.formatDuration(job.lastBuild.duration),
          result: job.lastBuild.result || 'IN_PROGRESS',
          commitHash: job.lastBuild.actions?.find(a => a.lastBuiltRevision)?.lastBuiltRevision?.SHA1 || 'Unknown',
          triggeredBy: job.lastBuild.actions?.find(a => a.causes)?.causes?.[0]?.userName || 'Unknown',
          parameters: this.extractParameters(job.lastBuild.actions)
        } : null,
      }));
    } catch (error) {
      this.logger.error('Failed to fetch Jenkins jobs', error);
      throw error;
    }
  }

  async getBuildLogs(jobName: string, buildNumber: number): Promise<string> {
    try {
      const url = `${this.JENKINS_URL}/job/${jobName}/${buildNumber}/consoleText`;
      const response = await axios.get(url, {
        auth: { username: this.JENKINS_USER, password: this.JENKINS_TOKEN },
      });
      return response.data;
    } catch (error) {
      this.logger.error(`Failed to fetch logs for ${jobName} #${buildNumber}`, error);
      throw error;
    }
  }

  async getBuildArtifacts(jobName: string, buildNumber: number): Promise<any> {
    try {
      const url = `${this.JENKINS_URL}/job/${jobName}/${buildNumber}/api/json?tree=artifacts[fileName,relativePath]`;
      const response = await axios.get(url, {
        auth: { username: this.JENKINS_USER, password: this.JENKINS_TOKEN },
      });

      return response.data.artifacts.map(artifact => ({
        fileName: artifact.fileName,
        downloadUrl: `${this.JENKINS_URL}/job/${jobName}/${buildNumber}/artifact/${artifact.relativePath}`,
      }));
    } catch (error) {
      this.logger.error(`Failed to fetch artifacts for ${jobName} #${buildNumber}`, error);
      throw error;
    }
  }

  private extractParameters(actions: any[]): any {
    const parametersAction = actions.find(action => action.parameters);
    return parametersAction ? parametersAction.parameters.map(p => ({ name: p.name, value: p.value })) : [];
  }

  private parseStatus(color: string): string {
    const statusMap = { blue: 'SUCCESS', red: 'FAILED', yellow: 'UNSTABLE', notbuilt: 'NOT BUILT', aborted: 'ABORTED' };
    return statusMap[color] || 'UNKNOWN';
  }

  private formatDuration(ms: number): string {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    return `${minutes}m ${seconds % 60}s`;
  }
}

‚úÖ Enhancements Added:
	‚Ä¢	getBuildLogs() ‚Üí Fetches build logs (console output).
	‚Ä¢	getBuildArtifacts() ‚Üí Retrieves build artifacts (downloadable files).
	‚Ä¢	extractParameters() ‚Üí Gets input parameters used when triggering the build.

2Ô∏è‚É£ Modify jenkins.controller.ts to Expose New Endpoints

import { Controller, Get, Param } from '@nestjs/common';
import { JenkinsService } from './jenkins.service';

@Controller('jenkins')
export class JenkinsController {
  constructor(private readonly jenkinsService: JenkinsService) {}

  @Get('jobs')
  async getJobStatuses() {
    return this.jenkinsService.getJobStatuses();
  }

  @Get('jobs/:jobName/:buildNumber/logs')
  async getBuildLogs(@Param('jobName') jobName: string, @Param('buildNumber') buildNumber: number) {
    return this.jenkinsService.getBuildLogs(jobName, buildNumber);
  }

  @Get('jobs/:jobName/:buildNumber/artifacts')
  async getBuildArtifacts(@Param('jobName') jobName: string, @Param('buildNumber') buildNumber: number) {
    return this.jenkinsService.getBuildArtifacts(jobName, buildNumber);
  }
}

‚úÖ New API Endpoints:
	‚Ä¢	GET /jenkins/jobs/{jobName}/{buildNumber}/logs ‚Üí Fetch build logs
	‚Ä¢	GET /jenkins/jobs/{jobName}/{buildNumber}/artifacts ‚Üí Fetch build artifacts

3Ô∏è‚É£ Test the API

Start the Backend

npm run start

Test API Endpoints

‚úÖ Fetch Jenkins Job Statuses

GET http://localhost:3000/jenkins/jobs

‚úÖ Fetch Jenkins Build Logs

GET http://localhost:3000/jenkins/jobs/Build-Project-A/25/logs

üîπ Expected Response:

Started by user JohnDoe
Running shell script
+ echo 'Deploying app...'
Deploying app...
Finished: SUCCESS

‚úÖ Fetch Jenkins Build Artifacts

GET http://localhost:3000/jenkins/jobs/Build-Project-A/25/artifacts

üîπ Expected JSON Response:

[
  { "fileName": "build.zip", "downloadUrl": "http://your-jenkins-server/job/Build-Project-A/25/artifact/build.zip" },
  { "fileName": "test-report.xml", "downloadUrl": "http://your-jenkins-server/job/Build-Project-A/25/artifact/test-report.xml" }
]

üéØ Next Steps

Now that we have:
‚úîÔ∏è Job statuses ‚úÖ
‚úîÔ∏è Build details (duration, timestamps, commit, triggeredBy) ‚úÖ
‚úîÔ∏è Console logs ‚úÖ
‚úîÔ∏è Build artifacts (downloadable files) ‚úÖ

Do you want to:
1Ô∏è‚É£ Enhance the frontend to display these details in Angular?
2Ô∏è‚É£ Move to the Git backend (recent commits, contributors)?