üöÄ Step 9: Build Git Frontend UI in Angular

Now, we will create the Git Dashboard UI to:
‚úîÔ∏è Display recent commits (commit message, author, date, SHA, branch)
‚úîÔ∏è Allow users to filter commits by branch
‚úîÔ∏è Show top contributors with avatars & contribution counts

1Ô∏è‚É£ Generate Git Components & Service

Run the following commands inside the Angular project:

ng generate service services/git
ng generate component components/git-dashboard
ng generate component components/contributors-list

‚úÖ This creates:

frontend/src/app/services/git.service.ts
frontend/src/app/components/git-dashboard/
frontend/src/app/components/contributors-list/

2Ô∏è‚É£ Implement git.service.ts

This service will fetch recent commits & contributors from the backend.

Modify git.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class GitService {
  private apiUrl = 'http://localhost:3000/git';

  constructor(private http: HttpClient) {}

  getCommits(owner: string, repo: string, branch?: string): Observable<any> {
    const url = branch ? `${this.apiUrl}/commits/${owner}/${repo}?branch=${branch}` : `${this.apiUrl}/commits/${owner}/${repo}`;
    return this.http.get(url);
  }

  getContributors(owner: string, repo: string): Observable<any> {
    return this.http.get(`${this.apiUrl}/contributors/${owner}/${repo}`);
  }
}

‚úÖ Handles API calls for:
	‚Ä¢	Fetching commits (with optional branch filtering)
	‚Ä¢	Fetching top contributors

3Ô∏è‚É£ Implement git-dashboard.component.ts

This component will:
‚úîÔ∏è Fetch commits from a repository
‚úîÔ∏è Allow users to select a branch
‚úîÔ∏è Show commits in a Material Table

Modify git-dashboard.component.ts

import { Component, OnInit } from '@angular/core';
import { GitService } from '../../services/git.service';

@Component({
  selector: 'app-git-dashboard',
  templateUrl: './git-dashboard.component.html',
  styleUrls: ['./git-dashboard.component.css']
})
export class GitDashboardComponent implements OnInit {
  commits: any[] = [];
  owner = 'your-org'; // Change this
  repo = 'your-repo'; // Change this
  branch = '';
  loading = false;

  constructor(private gitService: GitService) {}

  ngOnInit() {
    this.loadCommits();
  }

  loadCommits() {
    this.loading = true;
    this.gitService.getCommits(this.owner, this.repo, this.branch).subscribe(data => {
      this.commits = data;
      this.loading = false;
    }, () => {
      this.loading = false;
    });
  }
}

‚úÖ What this does:
	‚Ä¢	Fetches commits from API
	‚Ä¢	Supports branch filtering

4Ô∏è‚É£ Implement git-dashboard.component.html

This template will:
‚úîÔ∏è Use Material Table for commits
‚úîÔ∏è Add branch filtering input

Modify git-dashboard.component.html

<h2>GitHub Commits Dashboard</h2>

<mat-form-field>
  <mat-label>Branch</mat-label>
  <input matInput [(ngModel)]="branch" placeholder="Enter branch name">
</mat-form-field>
<button mat-raised-button color="primary" (click)="loadCommits()">Fetch Commits</button>

<mat-spinner *ngIf="loading"></mat-spinner>

<mat-table [dataSource]="commits" *ngIf="!loading">
  <ng-container matColumnDef="message">
    <mat-header-cell *matHeaderCellDef> Commit Message </mat-header-cell>
    <mat-cell *matCellDef="let commit"> {{ commit.message }} </mat-cell>
  </ng-container>

  <ng-container matColumnDef="author">
    <mat-header-cell *matHeaderCellDef> Author </mat-header-cell>
    <mat-cell *matCellDef="let commit"> {{ commit.author }} </mat-cell>
  </ng-container>

  <ng-container matColumnDef="date">
    <mat-header-cell *matHeaderCellDef> Date </mat-header-cell>
    <mat-cell *matCellDef="let commit"> {{ commit.date | date:'short' }} </mat-cell>
  </ng-container>

  <ng-container matColumnDef="sha">
    <mat-header-cell *matHeaderCellDef> SHA </mat-header-cell>
    <mat-cell *matCellDef="let commit">
      <a href="https://github.company.com/{{owner}}/{{repo}}/commit/{{commit.sha}}" target="_blank">
        {{ commit.sha | slice:0:7 }}
      </a>
    </mat-cell>
  </ng-container>

  <mat-header-row *matHeaderRowDef="['message', 'author', 'date', 'sha']"></mat-header-row>
  <mat-row *matRowDef="let row; columns: ['message', 'author', 'date', 'sha'];"></mat-row>
</mat-table>

‚úÖ Features:
	‚Ä¢	Material Table for commit history
	‚Ä¢	Branch filtering input
	‚Ä¢	Commit links to GitHub Enterprise

5Ô∏è‚É£ Implement contributors-list.component.ts

This component will show top contributors with avatars.

Modify contributors-list.component.ts

import { Component, OnInit } from '@angular/core';
import { GitService } from '../../services/git.service';

@Component({
  selector: 'app-contributors-list',
  templateUrl: './contributors-list.component.html',
  styleUrls: ['./contributors-list.component.css']
})
export class ContributorsListComponent implements OnInit {
  contributors: any[] = [];
  owner = 'your-org';
  repo = 'your-repo';

  constructor(private gitService: GitService) {}

  ngOnInit() {
    this.gitService.getContributors(this.owner, this.repo).subscribe(data => {
      this.contributors = data;
    });
  }
}

6Ô∏è‚É£ Implement contributors-list.component.html

<h2>Top Contributors</h2>

<mat-list>
  <mat-list-item *ngFor="let contributor of contributors">
    <img matListAvatar [src]="contributor.avatar_url" alt="{{ contributor.username }}">
    <h4 matLine>{{ contributor.username }}</h4>
    <p matLine>Contributions: {{ contributor.contributions }}</p>
  </mat-list-item>
</mat-list>

‚úÖ Displays:
	‚Ä¢	Contributor avatars
	‚Ä¢	Number of contributions

7Ô∏è‚É£ Register Components in app.module.ts

Modify app.module.ts to include Git components & services.

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

// Angular Material
import { MatTableModule } from '@angular/material/table';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatListModule } from '@angular/material/list';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';

import { AppComponent } from './app.component';
import { GitDashboardComponent } from './components/git-dashboard/git-dashboard.component';
import { ContributorsListComponent } from './components/contributors-list/contributors-list.component';
import { GitService } from './services/git.service';

@NgModule({
  declarations: [
    AppComponent,
    GitDashboardComponent,
    ContributorsListComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    FormsModule,
    BrowserAnimationsModule,
    MatTableModule,
    MatButtonModule,
    MatIconModule,
    MatListModule,
    MatFormFieldModule,
    MatInputModule,
    MatProgressSpinnerModule
  ],
  providers: [GitService],
  bootstrap: [AppComponent]
})
export class AppModule { }

8Ô∏è‚É£ Run & Test

ng serve

Navigate to http://localhost:4200 and:
‚úÖ View recent commits
‚úÖ Filter by branch
‚úÖ See top contributors

üéØ Next Steps

Now that Git frontend is complete, should we:
1Ô∏è‚É£ Enhance UI with tabs & charts?
2Ô∏è‚É£ Move to ServiceNow backend?