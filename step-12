üöÄ Step 12: Add Real-Time Jenkins Build Updates with WebSockets

Now, we will integrate WebSockets into Jenkins to:
‚úîÔ∏è Receive live Jenkins build updates (instead of refreshing manually)
‚úîÔ∏è Show real-time build status changes
‚úîÔ∏è Use Socket.io for fast updates

1Ô∏è‚É£ Install WebSocket Dependencies in Backend

Since we already installed socket.io, we just need to:
‚úîÔ∏è Create a WebSocket Gateway
‚úîÔ∏è Modify the Jenkins service to send real-time updates

2Ô∏è‚É£ Create a WebSocket Gateway for Jenkins in NestJS

Generate WebSocket Gateway

npx nest generate gateway jenkins-websockets

‚úÖ This creates:

backend/src/websockets/jenkins-websockets.gateway.ts
backend/src/websockets/jenkins-websockets.module.ts

3Ô∏è‚É£ Implement jenkins-websockets.gateway.ts

Modify WebSocket Gateway to send real-time Jenkins build status.

import { SubscribeMessage, WebSocketGateway, WebSocketServer } from '@nestjs/websockets';
import { Server } from 'socket.io';
import { Injectable, Logger } from '@nestjs/common';
import { JenkinsService } from '../jenkins/jenkins.service';

@WebSocketGateway({ cors: true })
@Injectable()
export class JenkinsWebsocketsGateway {
  @WebSocketServer()
  server: Server;

  private readonly logger = new Logger(JenkinsWebsocketsGateway.name);

  constructor(private readonly jenkinsService: JenkinsService) {}

  async emitBuildStatus() {
    const jobs = await this.jenkinsService.getJobStatuses();
    this.server.emit('buildStatusUpdate', jobs);
    this.logger.log(`Broadcasting Jenkins build status updates`);
  }

  @SubscribeMessage('subscribeToJenkins')
  handleSubscribe(client: any) {
    this.logger.log(`Client subscribed to Jenkins build updates`);
    this.emitBuildStatus();
  }
}

‚úÖ What This Does:
	‚Ä¢	Sends real-time Jenkins job statuses
	‚Ä¢	Listens for subscribeToJenkins event
	‚Ä¢	Fetches job statuses & emits updates to frontend

4Ô∏è‚É£ Register WebSocket Module in app.module.ts

Modify app.module.ts to include WebSockets.

import { Module } from '@nestjs/common';
import { JenkinsModule } from './jenkins/jenkins.module';
import { JenkinsWebsocketsGateway } from './websockets/jenkins-websockets.gateway';

@Module({
  imports: [JenkinsModule],
  providers: [JenkinsWebsocketsGateway],
})
export class AppModule {}

5Ô∏è‚É£ Modify Angular Service to Use WebSockets (jenkins.service.ts)

Modify jenkins.service.ts to listen for real-time updates.

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { io } from 'socket.io-client';

@Injectable({
  providedIn: 'root'
})
export class JenkinsService {
  private apiUrl = 'http://localhost:3000/jenkins';
  private socket = io('http://localhost:3000');

  constructor(private http: HttpClient) {}

  getJobStatuses(): Observable<any> {
    return this.http.get(`${this.apiUrl}/jobs`);
  }

  subscribeToBuildUpdates(callback: (data: any) => void) {
    this.socket.emit('subscribeToJenkins');
    this.socket.on('buildStatusUpdate', callback);
  }
}

‚úÖ What This Does:
	‚Ä¢	Subscribes to real-time build updates
	‚Ä¢	Emits subscribeToJenkins event
	‚Ä¢	Listens for buildStatusUpdate event from backend

6Ô∏è‚É£ Modify jenkins-dashboard.component.ts to Listen for Real-Time Updates

Now, update the component to receive real-time Jenkins job statuses.

import { Component, OnInit } from '@angular/core';
import { JenkinsService } from '../../services/jenkins.service';

@Component({
  selector: 'app-jenkins-dashboard',
  templateUrl: './jenkins-dashboard.component.html',
  styleUrls: ['./jenkins-dashboard.component.css']
})
export class JenkinsDashboardComponent implements OnInit {
  jobs: any[] = [];
  loading = true;

  constructor(private jenkinsService: JenkinsService) {}

  ngOnInit() {
    this.loadJobStatuses();
    this.subscribeToBuildUpdates();
  }

  loadJobStatuses() {
    this.loading = true;
    this.jenkinsService.getJobStatuses().subscribe(data => {
      this.jobs = data;
      this.loading = false;
    }, () => {
      this.loading = false;
    });
  }

  subscribeToBuildUpdates() {
    this.jenkinsService.subscribeToBuildUpdates((data) => {
      this.jobs = data;
    });
  }
}

‚úÖ What This Does:
	‚Ä¢	Loads initial Jenkins jobs
	‚Ä¢	Listens for real-time build updates

7Ô∏è‚É£ Modify jenkins-dashboard.component.html to Show Live Updates

<h2>Jenkins Build Dashboard</h2>

<mat-spinner *ngIf="loading"></mat-spinner>

<mat-table [dataSource]="jobs" *ngIf="!loading">
  <ng-container matColumnDef="name">
    <mat-header-cell *matHeaderCellDef> Job Name </mat-header-cell>
    <mat-cell *matCellDef="let job"> {{ job.name }} </mat-cell>
  </ng-container>

  <ng-container matColumnDef="status">
    <mat-header-cell *matHeaderCellDef> Status </mat-header-cell>
    <mat-cell *matCellDef="let job">
      <mat-chip [style.backgroundColor]="getStatusColor(job.status)">
        {{ job.status }}
      </mat-chip>
    </mat-cell>
  </ng-container>

  <ng-container matColumnDef="buildNumber">
    <mat-header-cell *matHeaderCellDef> Build # </mat-header-cell>
    <mat-cell *matCellDef="let job"> {{ job.lastBuild?.buildNumber || 'N/A' }} </mat-cell>
  </ng-container>

  <mat-header-row *matHeaderRowDef="['name', 'status', 'buildNumber']"></mat-header-row>
  <mat-row *matRowDef="let row; columns: ['name', 'status', 'buildNumber'];"></mat-row>
</mat-table>

‚úÖ Commits update live without needing a refresh!

8Ô∏è‚É£ Run & Test

Start Backend

cd backend
npm run start

Start Frontend

cd frontend
ng serve

Test WebSockets
	1.	Open two browser tabs with Jenkins Dashboard (http://localhost:4200)
	2.	Trigger a new Jenkins build
	3.	The build status updates instantly in the frontend!

üéØ Next Steps

Now that Jenkins real-time updates are working, should we:
1Ô∏è‚É£ Add environment health monitoring (Prometheus, Kubernetes)?
2Ô∏è‚É£ Move to ServiceNow backend (incidents, change requests)?